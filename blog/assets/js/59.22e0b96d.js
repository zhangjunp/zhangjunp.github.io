(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{411:function(a,n,t){"use strict";t.r(n);var e=t(42),r=Object(e.a)({},(function(){var a=this,n=a.$createElement,t=a._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java泛型"}},[a._v("#")]),a._v(" java泛型")]),a._v(" "),t("h4",{attrs:{id:"什么是泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是泛型"}},[a._v("#")]),a._v(" 什么是泛型？")]),a._v(" "),t("p",[a._v("​\t\t写在前边，原始文档参考oracle JDK文档："),t("a",{attrs:{href:"https://docs.oracle.com/javase/tutorial/java/generics/types.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("泛型学习"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("​\t\t泛型是java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法创建中，分别为泛型类、泛型接口、泛型方法。java语言引入泛型的好处是简单安全。")]),a._v(" "),t("p",[a._v("泛型的是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，一遍提高代码的重用率；")]),a._v(" "),t("h4",{attrs:{id:"泛型解决什么问题-为何出现泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型解决什么问题-为何出现泛型"}},[a._v("#")]),a._v(" 泛型解决什么问题/为何出现泛型？")]),a._v(" "),t("p",[a._v("​\t\t例如有些结合中的元素类型是Byte，有的可能是String，java允许程序员构建一个元素类型为Object的Collection，其中的元素可以是任意类型，没有泛型的情况下通过对Object的引用来实现参数的 任意化，需要作显示的强制类型转换，而这种转换要求开发者对实际参数类型必须是在提前预知的情况下进行的。")]),a._v(" "),t("p",[a._v("对于强制类型转换的错误情况，编译器是不可能提示错误的，而在运行时才会暴露出来，所以为了解决上述问题引入泛型")]),a._v(" "),t("p",[a._v("The following code snippet without generics requires casting:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('List list = new ArrayList();\nlist.add("hello");\nString s = (String) list.get(0);\n')])])]),t("p",[a._v("When re-written to use generics, the code does not require casting:")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" list "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// no cast")]),a._v("\n")])])]),t("h4",{attrs:{id:"为什么使用泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用泛型"}},[a._v("#")]),a._v(" 为什么使用泛型？")]),a._v(" "),t("ul",[t("li",[a._v("在编译时期进行更强的类型检查；这样修复编译时错误鼻修复运行时错误容易；")]),a._v(" "),t("li",[a._v("消除类型转换")]),a._v(" "),t("li",[a._v("使程序员能够实现通用算法")])]),a._v(" "),t("h4",{attrs:{id:"如何使用泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何使用泛型"}},[a._v("#")]),a._v(" 如何使用泛型？")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// 我们创建一个盒子类，里面可以放置任何类型的东西\npublic class Box {\n    private Object object;\n\n    public void set(Object object) { this.object = object; }\n    public Object get() { return object; }\n}\n\n// 使用泛型改造后，T是可以声明你要放置东西的类型 \npublic class Box<T> {\n    // T stands for "Type"\n    private T t;\n\n    public void set(T t) { this.t = t; }\n    public T get() { return t; }\n}\n')])])]),t("h5",{attrs:{id:"类型参数命名约定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型参数命名约定"}},[a._v("#")]),a._v(" 类型参数命名约定")]),a._v(" "),t("p",[a._v("​\t\t按照约定，类型参数名称是单个大写字母。这与您已经知道的变量"),t("a",{attrs:{href:"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html#naming",target:"_blank",rel:"noopener noreferrer"}},[a._v("命名"),t("OutboundLink")],1),a._v("约定形成鲜明对比 ，并且有充分的理由：没有该约定，将很难分辨类型变量与普通类或接口名称之间的区别。")]),a._v(" "),t("p",[a._v("最常用的类型参数名称为：")]),a._v(" "),t("ul",[t("li",[a._v("E-元素（由Java Collections Framework广泛使用）")]),a._v(" "),t("li",[a._v("K键")]),a._v(" "),t("li",[a._v("N-号码")]),a._v(" "),t("li",[a._v("T型")]),a._v(" "),t("li",[a._v("V-值")]),a._v(" "),t("li",[a._v("S，U，V等-第二，第三，第四类型")])]),a._v(" "),t("p",[a._v("您将看到在Java SE API以及本课程其余部分中使用的这些名称。")]),a._v(" "),t("h5",{attrs:{id:"泛型方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型方法"}},[a._v("#")]),a._v(" 泛型方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('public class Util {\n\t\t// 泛型方法\n    public static <K, V> boolean compare(Pair<K, V> p1, Pair<K, V> p2) {\n        return p1.getKey().equals(p2.getKey()) &&\n               p1.getValue().equals(p2.getValue());\n    }\n}\n\npublic class Pair<K, V> {\n\n    private K key;\n    private V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    public void setKey(K key) { this.key = key; }\n    public void setValue(V value) { this.value = value; }\n    public K getKey()   { return key; }\n    public V getValue() { return value; }\n}\n\n// 使用 The complete syntax for invoking this method would be:\nPair<Integer, String> p1 = new Pair<>(1, "apple");\nPair<Integer, String> p2 = new Pair<>(2, "pear");\n\nboolean same = Util.<Integer, String>compare(p1, p2);\nboolean same = Util.compare(p1, p2);\n')])])]),t("h5",{attrs:{id:"有界类型参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有界类型参数"}},[a._v("#")]),a._v(" 有界类型参数")]),a._v(" "),t("p",[a._v("​\t\t泛型使用中，可以限定泛型的范围")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 这个类型对象，内部只想存放Integer类型的，此时编译后，取得是Integer类型\npublic class NaturalNumber<T extends Integer> { .....}\n\n// 多边界类型，此时编译后，字节码取得是B1类型 这需要注意一下   接口和类都存在的情况下，先指定类，否则会编译报错\n\t<T extends B1 & B2 & B3> \n")])])]),t("h5",{attrs:{id:"通配符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通配符"}},[a._v("#")]),a._v(" 通配符")]),a._v(" "),t("p",[a._v("​\t\t在通用代码中，称为"),t("em",[a._v("通配符的")]),a._v("问号（"),t("code",[a._v("？")]),a._v("）表示未知类型。通配符可以在多种情况下使用：作为参数，字段或局部变量的类型；有时作为返回类型（尽管更具体的做法是更好的编程习惯）。通配符从不用作泛型方法调用，泛型类实例创建或超类型的类型参数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 上界通配符\npublic static void process(List<? extends Foo> list) { /* ... */ }\n\n// 无界通配符\npublic static void process(List<?> list) { /* ... */ }\n\n// 下界通配符\n//假设您要编写一种将Integer对象放入列表的方法。您希望该方法可用于<Integer>，<Number>和<Object> —可以容纳Integer值的任何内容。\npublic static void addNumbers(List<? super Integer> list) {\n    for (int i = 1; i <= 10; i++) {\n        list.add(i);\n    }\n}\n")])])]),t("h4",{attrs:{id:"类型擦除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型擦除"}},[a._v("#")]),a._v(" 类型擦除")]),a._v(" "),t("h5",{attrs:{id:"类型擦除原理介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型擦除原理介绍"}},[a._v("#")]),a._v(" 类型擦除原理介绍")]),a._v(" "),t("p",[a._v("​\tJava语言引入了泛型，以在编译时提供更严格的类型检查并支持泛型编程。为了实现泛型，Java编译器将类型擦除应用于：")]),a._v(" "),t("ul",[t("li",[a._v("如果类型参数不受限制，则将通用类型中的所有类型参数替换为其边界或"),t("code",[a._v("对象")]),a._v("。因此，产生的字节码仅包含普通的类，接口和方法。")]),a._v(" "),t("li",[a._v("必要时插入"),t("strong",[a._v("类型转换")]),a._v("，以保持类型安全。")]),a._v(" "),t("li",[a._v("生成"),t("strong",[a._v("桥接方法")]),a._v("以在扩展的泛型类型中保留多态。")])]),a._v(" "),t("p",[a._v("类型擦除可确保不会为参数化类型创建新的类；因此，泛型不会产生运行时开销。")]),a._v(" "),t("p",[a._v("下边来介绍一下什么是必要时插入类型转换，首先先了解一下什么是类型擦除")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// 我们定义了一个泛型类 Pair\npublic class Pair<T> {\n    private T first;\n    private T second;\n    public Pair() {\n    }\n    public Pair(T first, T second){\n        this.first = first;\n        this.second = second;\n    }\n\n    public void setFirst(T first) {\n        this.first = first;\n    }\n\n    public void setSecond(T second) {\n        this.second = second;\n    }\n\n    public T getFirst() {\n        return first;\n    }\n\n\n    public T getSecond() {\n        return second;\n    }\n}\n\n// 通过 javac Pair.java  指令 生成class文件\n// 通过 javap -c Pair.class 反编译\n\nCompiled from "Pair.java"\npublic class com.zhangjp.base.oo.genericParam.Pair<T> {\n  public com.zhangjp.base.oo.genericParam.Pair();\n    Code:\n       0: aload_0\n       1: invokespecial #1                  // Method java/lang/Object."<init>":()V\n       4: return\n\n  public com.zhangjp.base.oo.genericParam.Pair(T, T);\n    Code:\n       0: aload_0\n       1: invokespecial #1                  // Method java/lang/Object."<init>":()V\n       4: aload_0\n       5: aload_1\n       6: putfield      #2                  // Field first:Ljava/lang/Object;\n       9: aload_0\n      10: aload_2\n      11: putfield      #3                  // Field second:Ljava/lang/Object;\n      14: return\n\n  public void setFirst(T);\n    Code:\n       0: aload_0\n       1: aload_1\n       2: putfield      #2                  // Field first:Ljava/lang/Object;\n       5: return\n\n  public void setSecond(T);\n    Code:\n       0: aload_0\n       1: aload_1\n       2: putfield      #3                  // Field second:Ljava/lang/Object;\n       5: return\n\n  public T getFirst();\n    Code:\n       0: aload_0\n       1: getfield      #2                  // Field first:Ljava/lang/Object;\n       4: areturn\n\n  public T getSecond();\n    Code:\n       0: aload_0\n       1: getfield      #3                  // Field second:Ljava/lang/Object;\n       4: areturn\n}\n\n')])])]),t("p",[a._v("可以看到以上类由于没有指定T类型，泛型擦除后该类型的变量T将由Object代替")]),a._v(" "),t("p",[t("code",[a._v("javac genericParam/Pair.java genericParam/PairTest.java")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public class PairTest {\n\n    public static void testPair() {\n        Pair<String> pair = new Pair<>();\n        pair.setFirst("Bob");\n        pair.setSecond("Ed");\n\n        String first = pair.getFirst();\n        String second = pair.getSecond();\n\n        System.out.println("pair1: " + pair);\n        System.out.println("first: " + first);\n        System.out.println("second: " + second);\n    }\n}\n\n// class文件反编译后，可以看到其实真是类型还是Object，那我们声明的String类型在获取的时候是怎么获取到的呢？\n//  24: checkcast     #9                  // class java/lang/String   重点关注这一行\n// 这个就是官方文档上所说的   必要时插入**类型转换**，以保持类型安全。\nzhangjunpingdeMacBook-Pro:oo zhangjunping$ javap -c genericParam/PairTest.class \nCompiled from "PairTest.java"\npublic class com.zhangjp.base.oo.genericParam.PairTest {\n  public com.zhangjp.base.oo.genericParam.PairTest();\n    Code:\n       0: aload_0\n       1: invokespecial #1                  // Method java/lang/Object."<init>":()V\n       4: return\n\n  public static void testPair();\n    Code:\n       0: new           #2                  // class com/zhangjp/base/oo/genericParam/Pair\n       3: dup\n       4: invokespecial #3                  // Method com/zhangjp/base/oo/genericParam/Pair."<init>":()V\n       7: astore_0\n       8: aload_0\n       9: ldc           #4                  // String Bob\n      11: invokevirtual #5                  // Method com/zhangjp/base/oo/genericParam/Pair.setFirst:(Ljava/lang/Object;)V\n      14: aload_0\n      15: ldc           #6                  // String Ed\n      17: invokevirtual #7                  // Method com/zhangjp/base/oo/genericParam/Pair.setSecond:(Ljava/lang/Object;)V\n      20: aload_0\n      21: invokevirtual #8                  // Method com/zhangjp/base/oo/genericParam/Pair.getFirst:()Ljava/lang/Object;\n      24: checkcast     #9                  // class java/lang/String\n      27: astore_1\n      28: aload_0\n      29: invokevirtual #10                 // Method com/zhangjp/base/oo/genericParam/Pair.getSecond:()Ljava/lang/Object;\n      32: checkcast     #9                  // class java/lang/String\n      35: astore_2\n      36: getstatic     #11                 // Field java/lang/System.out:Ljava/io/PrintStream;\n      39: new           #12                 // class java/lang/StringBuilder\n      42: dup\n      43: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V\n      46: ldc           #14                 // String pair1:\n      48: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      51: aload_0\n      52: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n      55: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      58: invokevirtual #18                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      61: getstatic     #11                 // Field java/lang/System.out:Ljava/io/PrintStream;\n      64: new           #12                 // class java/lang/StringBuilder\n      67: dup\n      68: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V\n      71: ldc           #19                 // String first:\n      73: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      76: aload_1\n      77: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      80: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      83: invokevirtual #18                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      86: getstatic     #11                 // Field java/lang/System.out:Ljava/io/PrintStream;\n      89: new           #12                 // class java/lang/StringBuilder\n      92: dup\n      93: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V\n      96: ldc           #20                 // String second:\n      98: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n     101: aload_2\n     102: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n     105: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n     108: invokevirtual #18                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n     111: return\n}\n')])])]),t("p",[a._v("好了，了解完什么是"),t("strong",[a._v("类型擦除")]),a._v("   以及  "),t("strong",[a._v("类型转换")])]),a._v(" "),t("p",[a._v("接下来介绍一个***类型擦除与多态***冲突问题……  这个问题作为java基础，经常会被考察到")]),a._v(" "),t("h5",{attrs:{id:"类型擦除与多态冲突以及桥连方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型擦除与多态冲突以及桥连方法"}},[a._v("#")]),a._v(" 类型擦除与多态冲突以及桥连方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('    // 当一个类继承泛型类时，针对泛型方法重写时\n    public class NumPair extends Pair<Integer> {   \n    \n      @Override     \n      public void setFirst(Integer first) {    \n      \tSystem.out.println("call setFirst Method of NumPair"); \n      }  \n      \n    }\n    \n// 首先要明确，重写时发生在父子类中，子类重写父类方法，前提是参数和返回值，方法名要一致，这种行为又是我们常说的多态\n// 按照我们上述分析 Pair 这个父类编译后字节码中的方法入参是 Object类型，现在重写我们的入参是Integer类型，从现象上看泛型擦与多态冲突了\n    \n    \n\n  // 本质上其实并没有，当我们反编译NumPair类时，编译器不仅生成我们所提供的setFirst(Integer first)方法，还帮我们自动生成了一个签名为setFirst(Object first)的新方法；确实是由于类型擦除的原因，导致我们重写方法与父类方法在编译之后出现了签名不一致的情况。**编译器为了解决这个冲突，使得多态特性不被破坏。其会自动生成一个与父类签名一致的方法setFirst(Object first)，并在其内部去调用我们期望的setFirst(Integer first)方法**。由于这个编译器自动生成的方法，一方面是负责来实际重写父类方法的，另一方面则是为了调用开发者实际提供的重写方法，故其被形象地称之为**Bridge Method 桥链方法**\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);